{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@protobufjs/aspromise/index.js","webpack:///./node_modules/@protobufjs/base64/index.js","webpack:///./node_modules/@protobufjs/eventemitter/index.js","webpack:///./node_modules/@protobufjs/float/index.js","webpack:///./node_modules/@protobufjs/inquire/index.js","webpack:///./node_modules/@protobufjs/pool/index.js","webpack:///./node_modules/@protobufjs/utf8/index.js","webpack:///./node_modules/protobufjs/minimal.js","webpack:///./node_modules/protobufjs/src/index-minimal.js","webpack:///./node_modules/protobufjs/src/reader.js","webpack:///./node_modules/protobufjs/src/reader_buffer.js","webpack:///./node_modules/protobufjs/src/roots.js","webpack:///./node_modules/protobufjs/src/rpc.js","webpack:///./node_modules/protobufjs/src/rpc/service.js","webpack:///./node_modules/protobufjs/src/util/longbits.js","webpack:///./node_modules/protobufjs/src/util/minimal.js","webpack:///./node_modules/protobufjs/src/writer.js","webpack:///./node_modules/protobufjs/src/writer_buffer.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/components/AttachmentPopup.tsx","webpack:///./src/components/Login.tsx","webpack:///./src/components/MailRenderer.tsx","webpack:///./src/components/Menu.tsx","webpack:///./src/components/Root.tsx","webpack:///./src/index.tsx","webpack:///./src/protobuf_compiled.js","webpack:///./src/websocket.ts","webpack:///external \"React\"","webpack:///external \"ReactDOM\""],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AACA;;AAEA;AACA,wBAAwB,qBAAqB;AAC7C;AACA,UAAU;AACV,WAAW,WAAW;AACtB,WAAW,KAAK;AAChB,aAAa;AACb;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,EAAE;AACb,WAAW,KAAK;AAChB,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;ACnDA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA,UAAU;AACV,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA,8BAA8B,EAAE,mBAAmB,EAAE,iBAAiB,EAAE;AACxE;;;;;;;;;;;;;AC1IA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;;;;;;;;;;;;AC3EA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK,IAAI;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK,IAAI;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa,0CAA0C;AACvD;AACA;AACA,aAAa;AACb;AACA,oDAAoD;AACpD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9UA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA,KAAK,aAAa;AAClB;AACA;;;;;;;;;;;;;AChBA;AACA;;AAEA;AACA,4BAA4B,gBAAgB;AAC5C;AACA,UAAU;AACV,WAAW,OAAO;AAClB,aAAa,WAAW;AACxB;;AAEA;AACA,wBAAwB,gBAAgB;AACxC;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,WAAW;AACxB,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/CA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,WAAW;AACX,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxGA;;AAEA;AACA;;;;;;;;;;;;;ACHA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACnCA;AACA;;AAEA;;AAEA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,oBAAoB,IAAI,mBAAmB,uCAAuC;AAC/F,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA,2BAA2B;AAC3B;AACA,iEAAiE;AACjE,iEAAiE;AACjE,iEAAiE;AACjE,iEAAiE;AACjE,iEAAiE;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,KAAK;AACL;;;;;;;;;;;;;ACpZA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;;;;;;;;;;;;AC3CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,qBAAqB;AACtD;AACA,UAAU;AACV,WAAW,mCAAmC,YAAY,GAAG;AAC7D,WAAW,WAAW;AACtB,WAAW,gBAAgB;AAC3B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,mCAAmC,cAAc;AACjD;AACA,UAAU;AACV,WAAW,WAAW;AACtB,WAAW,gBAAgB;AAC3B,aAAa;AACb;;AAEA;;;;;;;;;;;;;ACnCA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,yCAAyC,sCAAsC;AAC/E;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA,UAAU;AACV,WAAW,WAAW;AACtB,WAAW,KAAK;AAChB,aAAa;AACb;;AAEA;AACA,+BAA+B,kBAAkB,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA,UAAU;AACV,WAAW,sBAAsB;AACjC,WAAW,gCAAgC;AAC3C,aAAa,uBAAuB;AACpC;;AAEA;AACA;AACA,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,mCAAmC,kCAAkC;AACrE,WAAW,oCAAoC;AAC/C,WAAW,kBAAkB;AAC7B,WAAW,kBAAkB;AAC7B,WAAW,sBAAsB;AACjC,WAAW,gCAAgC;AAC3C,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,kCAAkC,EAAE;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7IA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA,4BAA4B,UAAU;AACtC,4CAA4C,aAAa;AACzD,0BAA0B,UAAU;;AAEpC;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;8CCvMA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oFAAoF;;AAEpF;AACA;AACA,UAAU;AACV;AACA;AACA,mDAAmD,kCAAkC;;AAErF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,EAAE;;AAEpC;AACA;AACA,WAAW,YAAY;AACvB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa,kBAAkB;AAC/B;AACA,oCAAoC;AACpC,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,mBAAmB;AAChC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,gDAAgD,kBAAkB,gBAAgB,EAAE,EAAE;;AAEtF;AACA;AACA;AACA;AACA,kDAAkD,mCAAmC;;AAErF;AACA;AACA;;AAEA;;AAEA,0DAA0D,kBAAkB,aAAa,EAAE,EAAE;;AAE7F;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B;AACA;AACA,oCAAoC;AACpC,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,kCAAkC,uBAAuB;AACzD;AACA,UAAU;AACV,aAAa,iBAAiB;AAC9B;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,YAAY;AACzB;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB;AACvB,+DAA+D,QAAQ;AACvE;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,uBAAuB;AACzD;AACA,UAAU;AACV,WAAW,iBAAiB;AAC5B,aAAa;AACb;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,YAAY;AACzB;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7ZA;AACA;;AAEA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,gCAAgC;AAC3C,WAAW,OAAO;AAClB,WAAW,EAAE;AACb;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,mBAAmB;AACnB;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,oBAAoB,IAAI,mBAAmB,0CAA0C;AAClG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,WAAW;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gCAAgC;AAC3C,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,yBAAyB,KAAK,2BAA2B;AACrE,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AC1cA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;;;;;;;;;;;AChFA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;;;;ACnBA,wDAA+B;AASpB,gBAAQ,GAAG,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;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gGAAgG,gDAAgD;AAChJ;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,4BAA4B;AACjD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,4BAA4B;AACjD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C,sBAAsB,uCAAuC;AAC7D,sBAAsB,qCAAqC;AAC3D,sBAAsB,qCAAqC;AAC3D,sBAAsB,0CAA0C;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,iDAAiD;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,+CAA+C;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,+CAA+C;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,oDAAoD;AACxE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,8DAA8D;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;;AAEA;AACA,8EAA8E,gDAAgD;AAC9H;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gGAAgG,gDAAgD;AAChJ;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,4BAA4B;AACjD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,4BAA4B;AACjD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;;AAEA;AACA,qEAAqE,uCAAuC;AAC5G;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uFAAuF,uCAAuC;AAC9H;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,mBAAmB;AACxC,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,mBAAmB;AACxC,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;;AAEA;AACA,gFAAgF,kDAAkD;AAClI;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kGAAkG,kDAAkD;AACpJ;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,8BAA8B;AACnD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,8BAA8B;AACnD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qCAAqC;AACxD;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qCAAqC;AACxD,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;;AAEA;AACA,qFAAqF,uDAAuD;AAC5I;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uGAAuG,uDAAuD;AAC9J;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,mCAAmC;AACxD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,mCAAmC;AACxD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mCAAmC;AACtD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC,sBAAsB,4BAA4B;AAClD,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,gBAAgB;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sCAAsC;AACzD;AACA;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sCAAsC;AACzD,qBAAqB,oCAAoC;AACzD;AACA;AACA;AACA;;AAEA;AACA,sFAAsF,wDAAwD;AAC9I;AACA;AACA;AACA,mBAAmB,qCAAqC;AACxD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,iBAAiB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wGAAwG,wDAAwD;AAChK;AACA;AACA;AACA,mBAAmB,qCAAqC;AACxD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,oCAAoC;AACzD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,oCAAoC;AACzD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,oCAAoC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,iBAAiB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mCAAmC;AACtD;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mCAAmC;AACtD,qBAAqB,iCAAiC;AACtD;AACA;AACA;AACA;;AAEA;AACA,mFAAmF,qDAAqD;AACxI;AACA;AACA;AACA,mBAAmB,kCAAkC;AACrD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qGAAqG,qDAAqD;AAC1J;AACA;AACA;AACA,mBAAmB,kCAAkC;AACrD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,iCAAiC;AACtD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,iCAAiC;AACtD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,iCAAiC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD,qBAAqB,kCAAkC;AACvD;AACA;AACA;AACA;;AAEA;AACA,oFAAoF,sDAAsD;AAC1I;AACA;AACA;AACA,mBAAmB,mCAAmC;AACtD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sGAAsG,sDAAsD;AAC5J;AACA;AACA;AACA,mBAAmB,mCAAmC;AACtD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,kCAAkC;AACvD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,kCAAkC;AACvD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,kCAAkC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAkC;AACrD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,aAAa;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;;AAEA;AACA,2EAA2E,6CAA6C;AACxH;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6FAA6F,6CAA6C;AAC1I;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,yBAAyB;AAC9C,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,yBAAyB;AAC9C,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;;AAEA;AACA,gFAAgF,kDAAkD;AAClI;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kGAAkG,kDAAkD;AACpJ;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,8BAA8B;AACnD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,8BAA8B;AACnD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,aAAa;AACnC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,4BAA4B;AAClD,sBAAsB,4CAA4C;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,mDAAmD;AACpI;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,iBAAiB;AACrF;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;;AAEA;AACA,mGAAmG,mDAAmD;AACtJ;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,+BAA+B;AACpD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,+BAA+B;AACpD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,iBAAiB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;;AAEA;AACA,gFAAgF,kDAAkD;AAClI;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kGAAkG,kDAAkD;AACpJ;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,8BAA8B;AACnD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,8BAA8B;AACnD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC,sBAAsB,YAAY;AAClC,sBAAsB,oBAAoB;AAC1C,sBAAsB,YAAY;AAClC,sBAAsB,uCAAuC;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,mDAAmD;AACpI;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;;AAEA;AACA,mGAAmG,mDAAmD;AACtJ;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD,mBAAmB,iBAAiB;AACpC,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,OAAO;AAC1B,qBAAqB,+BAA+B;AACpD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,qBAAqB,+BAA+B;AACpD,oBAAoB,MAAM;AAC1B,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.tsx\");\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import * as React from \"react\";\n\ninterface Props {\n    current: server.Attachment | null;\n}\n\ninterface State {\n}\n\nexport var MODAL_ID = \"attachment_modal\";\n\nexport class AttachmentPopup extends React.Component<Props, State> {\n    constructor(props: Props, context?: any) {\n        super(props, context);\n        this.state = {\n        };\n    }\n\n    static is_renderable_mime_type(mime_type: string) {\n        return mime_type.startsWith(\"image/\");\n    }\n\n    static is_text_mime_type(mime_type: string) {\n        return mime_type.startsWith(\"text/\") || mime_type.startsWith(\"multipart/\");\n    }\n\n    render() {\n        let attachment_name = \"unknown\";\n        let attachment_content = null;\n        if (this.props.current) {\n            if (this.props.current.name) {\n                attachment_name = this.props.current.name;\n            }\n            attachment_name += \" (\" + this.props.current.mime_type + \")\";\n\n            if (AttachmentPopup.is_renderable_mime_type(this.props.current.mime_type)) {\n                var base64 = base64ArrayBuffer(this.props.current.contents);\n                attachment_content = <img src={\"data:\" + this.props.current.mime_type + \";base64,\" + base64} />;\n            }\n            if (AttachmentPopup.is_text_mime_type(this.props.current.mime_type)) {\n                attachment_content = <pre>\n                    {String.fromCharCode.apply(null, this.props.current.contents)}\n                </pre>;\n            }\n        }\n\n        return <div className=\"modal fade bd-example-modal-lg\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\" id={MODAL_ID}>\n            <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\">{\n                            this.props.current\n                                ? attachment_name\n                                : \"\"\n                        }</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {attachment_content}\n                    </div>\n                    <div className=\"modal-footer\">\n                        {this.props.current\n                            ? <a href={\"attachment/\" + this.props.current.id} className=\"btn btn-default\">Download</a>\n                            : null\n                        }\n                        <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\">Close</button>\n                    </div>\n                </div>\n            </div>\n        </div>;\n    }\n}\n\n\nfunction base64ArrayBuffer(arrayBuffer: number[]) {\n    var base64 = ''\n    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\n    var bytes = new Uint8Array(arrayBuffer)\n    var byteLength = bytes.byteLength\n    var byteRemainder = byteLength % 3\n    var mainLength = byteLength - byteRemainder\n\n    var a, b, c, d\n    var chunk\n\n    // Main loop deals with bytes in chunks of 3\n    for (var i = 0; i < mainLength; i = i + 3) {\n        // Combine the three bytes into a single integer\n        chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\n\n        // Use bitmasks to extract 6-bit segments from the triplet\n        a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\n        b = (chunk & 258048) >> 12 // 258048   = (2^6 - 1) << 12\n        c = (chunk & 4032) >> 6 // 4032     = (2^6 - 1) << 6\n        d = chunk & 63               // 63       = 2^6 - 1\n\n        // Convert the raw binary segments to the appropriate ASCII encoding\n        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\n    }\n\n    // Deal with the remaining bytes and padding\n    if (byteRemainder == 1) {\n        chunk = bytes[mainLength]\n\n        a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\n\n        // Set the 4 least significant bits to zero\n        b = (chunk & 3) << 4 // 3   = 2^2 - 1\n\n        base64 += encodings[a] + encodings[b] + '=='\n    } else if (byteRemainder == 2) {\n        chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\n\n        a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\n        b = (chunk & 1008) >> 4 // 1008  = (2^6 - 1) << 4\n\n        // Set the 2 least significant bits to zero\n        c = (chunk & 15) << 2 // 15    = 2^4 - 1\n\n        base64 += encodings[a] + encodings[b] + encodings[c] + '='\n    }\n\n    return base64\n}","import * as React from \"react\";\n\ninterface Props {\n    onAuthenticate: (username: string, password: string) => void;\n    clear_failed_login: () => void;\n    failed_login: boolean;\n}\n\ninterface State {\n    username: string;\n    password: string;\n}\n\nexport class Login extends React.Component<Props, State> {\n    constructor(props: Props, context?: any) {\n        super(props, context);\n        this.state = {\n            username: \"\",\n            password: \"\",\n        };\n    }\n\n    update_username(ev: React.ChangeEvent<HTMLInputElement>) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.setState({ username: ev.target.value });\n        if(this.props.failed_login) {\n            this.props.clear_failed_login();\n        }\n        return false;\n    }\n    update_password(ev: React.ChangeEvent<HTMLInputElement>) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.setState({ password: ev.target.value });\n        if(this.props.failed_login) {\n            this.props.clear_failed_login();\n        }\n        return false;\n    }\n\n    login(ev: React.FormEvent<HTMLFormElement>) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.props.onAuthenticate(this.state.username, this.state.password);\n        this.setState({ password: \"\" });\n\n        return false;\n    }\n\n    render() {\n        return <div className=\"card mx-auto\" style={{ width: \"600px\" }}>\n            <div className=\"card-header\">\n                Log in\n            </div>\n            <form className=\"card-body\" onSubmit={this.login.bind(this)}>\n                {this.props.failed_login ? <span className=\"text-danger\">Login failed</span> : null}\n                <div className=\"form-group row\">\n                    <label htmlFor=\"input_username\" className=\"col-sm-3 col-form-label\">Username</label>\n                    <div className=\"col-sm-9\">\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Username\" id=\"input_username\"\n                            value={this.state.username} onChange={this.update_username.bind(this)} />\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <label htmlFor=\"input_password\" className=\"col-sm-3 col-form-label\">Password</label>\n                    <div className=\"col-sm-9\">\n                        <input type=\"password\" className=\"form-control\" placeholder=\"Password\" id=\"input_password\"\n                            value={this.state.password} onChange={this.update_password.bind(this)} />\n                    </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary float-right\">Log in</button>\n            </form>\n        </div>;\n    }\n}\n","import * as React from \"react\";\nimport { Handler } from \"../websocket\";\nimport { AttachmentPopup, MODAL_ID as ATTACHMENT_MODAL_ID } from \"./AttachmentPopup\";\n\ninterface State {\n    show_html: boolean;\n}\n\ninterface Props {\n    email: server.Email;\n    handler: Handler;\n}\n\nexport class MailRenderer extends React.Component<Props, State> {\n    constructor(props: Props, context?: any) {\n        super(props, context);\n        this.state = {\n            show_html: false,\n        };\n    }\n\n    set_show_html(show_html: boolean, ev: React.MouseEvent<HTMLAnchorElement>) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.setState({ show_html });\n\n        return false;\n    }\n\n    select_attachment(attachment: server.AttachmentInfo, ev: React.MouseEvent<HTMLButtonElement>) {\n        this.props.handler.load_attachment(attachment);\n    }\n\n    download_attachment(attachment: server.AttachmentInfo, ev: React.MouseEvent<HTMLButtonElement>) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        document.location.href = \"attachment/\" + attachment.id;\n\n        return false;\n    }\n\n    render_attachments() {\n        const attachments = [];\n        for (const attachment of this.props.email.attachments) {\n            const name = attachment.name || (\"unknown \" + attachment.mime_type);\n            if (AttachmentPopup.is_renderable_mime_type(attachment.mime_type)) {\n                attachments.push(\n                    <button type=\"button\" className=\"btn btn-secondary\" key={attachment.id}\n                        onClick={this.select_attachment.bind(this, attachment)} data-toggle=\"modal\" data-target={\"#\" + ATTACHMENT_MODAL_ID}>\n                        {name}\n                    </button>\n                );\n            } else {\n                attachments.push(\n                    <button type=\"button\" className=\"btn btn-secondary\" key={attachment.id}\n                        onClick={this.download_attachment.bind(this, attachment)}>\n                        {name}\n                    </button>\n                );\n            }\n        }\n        if (attachments.length > 0) {\n            return <>\n                <div className=\"btn-group\" style={{ flexWrap: \"wrap\" }} role=\"group\" aria-label=\"Attachments\">\n                    {attachments}\n                </div>\n                <br />\n            </>;\n        }\n        return null;\n    }\n\n    render_text_html_tabs() {\n        return <ul className=\"nav nav-tabs\">\n            <li className=\"nav-item\">\n                <a className={\"nav-link\" + (this.state.show_html ? \"\" : \" active\")} href=\"#\" onClick={this.set_show_html.bind(this, false)}>Plain text</a>\n            </li>\n            <li className=\"nav-item\">\n                <a className={\"nav-link\" + (this.state.show_html ? \" active\" : \"\")} href=\"#\" onClick={this.set_show_html.bind(this, true)}>HTML</a>\n            </li>\n        </ul>\n    }\n\n    render_body() {\n        if (this.state.show_html) {\n            return <div dangerouslySetInnerHTML={{ __html: this.props.email.html_body || \"\" }} />;\n        } else {\n            return (this.props.email.text_plain_body || \"\").split('\\n').map((p, i) => <React.Fragment key={i}>{p}<br /></React.Fragment>);\n        }\n    }\n\n    render() {\n        return <div>\n            <h2>{this.props.email.subject}</h2>\n            {this.props.email.from} -&gt; {this.props.email.to}<br /><br />\n            {this.render_attachments()}\n            {this.props.email.html_body ? this.render_text_html_tabs() : null}\n            {this.render_body()}\n        </div>;\n    }\n}","import * as React from \"react\";\n\ninterface State {\n    offset: number;\n}\n\ninterface Props {\n    inboxes: server.Inbox[];\n    emails: server.EmailInfo[];\n    active_inbox: server.Inbox | null;\n    active_email: server.EmailInfo | null;\n    onInboxSelected: (addr: server.Inbox) => void;\n    onEmailSelected: (email: server.EmailInfo) => void;\n}\n\nexport class Menu extends React.Component<Props, State> {\n    constructor(props: Props, context?: any) {\n        super(props, context);\n        this.state = {\n            offset: 0,\n        };\n    }\n\n    back() {\n        this.setState(state => ({\n            offset: 0,\n        }));\n    }\n\n    select_inbox(inbox: server.Inbox, ev: React.MouseEvent<HTMLLIElement>) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.setState({\n            offset: 1\n        });\n\n        this.props.onInboxSelected(inbox);\n\n        return false;\n    }\n\n    select_email(email: server.Email, ev: React.MouseEvent<HTMLLIElement>) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.props.onEmailSelected(email);\n\n        return false;\n    }\n\n    render_inbox(inbox: server.Inbox, index: number) {\n        return <li key={index} onClick={this.select_inbox.bind(this, inbox)}\n            className={this.props.active_inbox && this.props.active_inbox.id == inbox.id ? \"active\": \"\"}>\n            {inbox.unread_count > 0\n                ? <b>{inbox.name} ({inbox.unread_count})</b>\n                : inbox.name\n            }<br />\n        </li>\n    }\n\n    render_email(email: server.Email, index: number) {\n        return <li key={index} onClick={this.select_email.bind(this, email)}\n            className={this.props.active_email && this.props.active_email.id == email.id ? \"active\":\"\"}>\n        {email.read\n            ? email.from\n            : <b>{email.from} *</b>}\n            <br />\n            {email.subject}\n        </li>\n    }\n\n    render() {\n        return <div className=\"sliding-row\">\n            <div style={{left: (-this.state.offset * 100) + \"%\"}}>\n                <ul className=\"box-list\">\n                    {this.props.inboxes.map(this.render_inbox.bind(this))}\n                </ul>\n            </div>\n            <div style={{left: (-this.state.offset * 100) + \"%\"}}>\n                <div onClick={this.back.bind(this)} style={{cursor: \"pointer\"}}>\n                    &lt; Back\n                </div>\n                <ul className=\"box-list\">\n                    {this.props.emails.map(this.render_email.bind(this))}\n                </ul>\n            </div>\n        </div>;\n    }\n}\n","import * as React from \"react\";\nimport { Menu } from \"./Menu\";\nimport { MailRenderer } from \"./MailRenderer\";\nimport { AttachmentPopup } from \"./AttachmentPopup\";\nimport { Handler } from \"../websocket\";\nimport { Login } from \"./Login\";\n\ninterface State {\n    inboxes: server.Inbox[];\n    emails: server.EmailInfo[];\n    current_inbox: server.Inbox | null;\n    current_email_info: server.EmailInfo | null;\n    current_email: server.Email | null;\n    current_attachment: server.Attachment | null;\n    handler: Handler;\n    authenticated: boolean;\n    failed_login: boolean;\n}\n\ninterface Props {\n}\n\nexport class Root extends React.Component<Props, State> {\n    constructor(props: Props, context?: any) {\n        super(props, context);\n        this.state = {\n            inboxes: [\n            ],\n            emails: [],\n            current_inbox: null,\n            current_email_info: null,\n            current_email: null,\n            current_attachment: null,\n            handler: new Handler(this),\n            authenticated: false,\n            failed_login: false,\n        };\n    }\n\n    email_received(email: server.EmailInfo) {\n        this.setState(state => {\n            let emails = state.emails.slice();\n            let inboxes = state.inboxes.slice();\n            let current_inbox = state.current_inbox;\n\n            let inbox = inboxes.find(a => a.id == email.inbox_id);\n            if (inbox) {\n                inbox.unread_count++;\n            }\n            if (current_inbox && current_inbox.id == email.inbox_id) {\n                current_inbox.unread_count++;\n                if (email.inbox_id == current_inbox.id) {\n                    emails.splice(0, 0, email);\n                }\n            }\n            return { emails, current_inbox, inboxes };\n        });\n    }\n\n    inbox_loaded(inbox: server.Inbox, emails: server.Email[]) {\n        this.setState(state => {\n            if (state.current_inbox && state.current_inbox.name == inbox.name) {\n                return { emails } as any;\n            } else {\n                return {};\n            }\n        });\n    }\n\n    attachment_loaded(attachment: server.Attachment) {\n        this.setState({\n            current_attachment: attachment\n        });\n    }\n    email_loaded(email: server.Email) {\n        this.setState(state => {\n            if (state.current_email_info && state.current_email_info.id == email.id) {\n                return { current_email: email } as any;\n            } else {\n                return {};\n            }\n        });\n    }\n    setup(inboxes: server.Inbox[]) {\n        this.setState({ inboxes });\n    }\n\n    select_inbox(inbox: server.Inbox) {\n        this.state.handler.load_inbox(inbox);\n        this.setState({\n            current_inbox: inbox\n        });\n    }\n\n    select_email(email: server.EmailInfo) {\n        if (!email.read) {\n            email.read = true;\n            if (this.state.current_inbox) {\n                this.state.current_inbox.unread_count--;\n            }\n        }\n        this.state.handler.load_email(email);\n        this.setState({\n            current_email_info: email,\n            current_email: null,\n        });\n    }\n\n    authenticate_result(authenticated: boolean) {\n        this.setState({ authenticated, failed_login: authenticated === false });\n    }\n\n    authenticate(username: string, password: string) {\n        this.state.handler.authenticate(username, password);\n    }\n\n    clear_failed_login() {\n        this.setState({ failed_login: false });\n    }\n\n    render() {\n        if (!this.state.authenticated) {\n            return <Login\n                onAuthenticate={this.authenticate.bind(this)}\n                failed_login={this.state.failed_login}\n                clear_failed_login={this.clear_failed_login.bind(this)}\n            />;\n        }\n        return <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col-md-4\" style={{ overflowY: \"auto\", height: \"100vh\" }}>\n                    <Menu inboxes={this.state.inboxes}\n                        emails={this.state.emails}\n                        onInboxSelected={this.select_inbox.bind(this)}\n                        onEmailSelected={this.select_email.bind(this)}\n                        active_inbox={this.state.current_inbox}\n                        active_email={this.state.current_email}\n                    />\n                </div>\n                <div className=\"col-md-8\" style={{ overflowY: \"auto\", height: \"100vh\" }}>\n                    {this.state.current_email ? <MailRenderer email={this.state.current_email} handler={this.state.handler} /> : null}\n                </div>\n                <AttachmentPopup current={this.state.current_attachment} />\n            </div>\n        </div>;\n    }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Root } from \"./components/Root\";\n\nReactDOM.render(\n    <Root />,\n    document.getElementById(\"example\")\n);\n\ndeclare global {\n    interface Window {\n        replace_url_by_image(element: HTMLAnchorElement): void;\n    }\n}\n\nwindow.replace_url_by_image = function (element: HTMLAnchorElement) {\n    const parent = element.parentElement!;\n    const new_node = document.createElement(\"img\");\n    new_node.src = element.href;\n    parent.replaceChild(new_node, element);\n\n    return false;\n};\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.email_client = (function() {\n\n    /**\n     * Namespace email_client.\n     * @exports email_client\n     * @namespace\n     */\n    var email_client = {};\n\n    email_client.ClientToServer = (function() {\n\n        /**\n         * Properties of a ClientToServer.\n         * @memberof email_client\n         * @interface IClientToServer\n         * @property {email_client.ILoadInboxRequest|null} [loadInbox] ClientToServer loadInbox\n         * @property {email_client.IAuthenticateRequest|null} [authenticate] ClientToServer authenticate\n         * @property {email_client.ILoadEmailRequest|null} [loadEmail] ClientToServer loadEmail\n         * @property {email_client.ILoadAttachmentRequest|null} [loadAttachment] ClientToServer loadAttachment\n         */\n\n        /**\n         * Constructs a new ClientToServer.\n         * @memberof email_client\n         * @classdesc Represents a ClientToServer.\n         * @implements IClientToServer\n         * @constructor\n         * @param {email_client.IClientToServer=} [properties] Properties to set\n         */\n        function ClientToServer(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientToServer loadInbox.\n         * @member {email_client.ILoadInboxRequest|null|undefined} loadInbox\n         * @memberof email_client.ClientToServer\n         * @instance\n         */\n        ClientToServer.prototype.loadInbox = null;\n\n        /**\n         * ClientToServer authenticate.\n         * @member {email_client.IAuthenticateRequest|null|undefined} authenticate\n         * @memberof email_client.ClientToServer\n         * @instance\n         */\n        ClientToServer.prototype.authenticate = null;\n\n        /**\n         * ClientToServer loadEmail.\n         * @member {email_client.ILoadEmailRequest|null|undefined} loadEmail\n         * @memberof email_client.ClientToServer\n         * @instance\n         */\n        ClientToServer.prototype.loadEmail = null;\n\n        /**\n         * ClientToServer loadAttachment.\n         * @member {email_client.ILoadAttachmentRequest|null|undefined} loadAttachment\n         * @memberof email_client.ClientToServer\n         * @instance\n         */\n        ClientToServer.prototype.loadAttachment = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * ClientToServer message.\n         * @member {\"loadInbox\"|\"authenticate\"|\"loadEmail\"|\"loadAttachment\"|undefined} message\n         * @memberof email_client.ClientToServer\n         * @instance\n         */\n        Object.defineProperty(ClientToServer.prototype, \"message\", {\n            get: $util.oneOfGetter($oneOfFields = [\"loadInbox\", \"authenticate\", \"loadEmail\", \"loadAttachment\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientToServer instance using the specified properties.\n         * @function create\n         * @memberof email_client.ClientToServer\n         * @static\n         * @param {email_client.IClientToServer=} [properties] Properties to set\n         * @returns {email_client.ClientToServer} ClientToServer instance\n         */\n        ClientToServer.create = function create(properties) {\n            return new ClientToServer(properties);\n        };\n\n        /**\n         * Encodes the specified ClientToServer message. Does not implicitly {@link email_client.ClientToServer.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.ClientToServer\n         * @static\n         * @param {email_client.IClientToServer} message ClientToServer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientToServer.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.loadInbox != null && message.hasOwnProperty(\"loadInbox\"))\n                $root.email_client.LoadInboxRequest.encode(message.loadInbox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.authenticate != null && message.hasOwnProperty(\"authenticate\"))\n                $root.email_client.AuthenticateRequest.encode(message.authenticate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.loadEmail != null && message.hasOwnProperty(\"loadEmail\"))\n                $root.email_client.LoadEmailRequest.encode(message.loadEmail, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.loadAttachment != null && message.hasOwnProperty(\"loadAttachment\"))\n                $root.email_client.LoadAttachmentRequest.encode(message.loadAttachment, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientToServer message, length delimited. Does not implicitly {@link email_client.ClientToServer.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.ClientToServer\n         * @static\n         * @param {email_client.IClientToServer} message ClientToServer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientToServer.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientToServer message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.ClientToServer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.ClientToServer} ClientToServer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientToServer.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.ClientToServer();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.loadInbox = $root.email_client.LoadInboxRequest.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.authenticate = $root.email_client.AuthenticateRequest.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.loadEmail = $root.email_client.LoadEmailRequest.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.loadAttachment = $root.email_client.LoadAttachmentRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientToServer message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.ClientToServer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.ClientToServer} ClientToServer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientToServer.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientToServer message.\n         * @function verify\n         * @memberof email_client.ClientToServer\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientToServer.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.loadInbox != null && message.hasOwnProperty(\"loadInbox\")) {\n                properties.message = 1;\n                {\n                    var error = $root.email_client.LoadInboxRequest.verify(message.loadInbox);\n                    if (error)\n                        return \"loadInbox.\" + error;\n                }\n            }\n            if (message.authenticate != null && message.hasOwnProperty(\"authenticate\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.email_client.AuthenticateRequest.verify(message.authenticate);\n                    if (error)\n                        return \"authenticate.\" + error;\n                }\n            }\n            if (message.loadEmail != null && message.hasOwnProperty(\"loadEmail\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.email_client.LoadEmailRequest.verify(message.loadEmail);\n                    if (error)\n                        return \"loadEmail.\" + error;\n                }\n            }\n            if (message.loadAttachment != null && message.hasOwnProperty(\"loadAttachment\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.email_client.LoadAttachmentRequest.verify(message.loadAttachment);\n                    if (error)\n                        return \"loadAttachment.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientToServer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.ClientToServer\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.ClientToServer} ClientToServer\n         */\n        ClientToServer.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.ClientToServer)\n                return object;\n            var message = new $root.email_client.ClientToServer();\n            if (object.loadInbox != null) {\n                if (typeof object.loadInbox !== \"object\")\n                    throw TypeError(\".email_client.ClientToServer.loadInbox: object expected\");\n                message.loadInbox = $root.email_client.LoadInboxRequest.fromObject(object.loadInbox);\n            }\n            if (object.authenticate != null) {\n                if (typeof object.authenticate !== \"object\")\n                    throw TypeError(\".email_client.ClientToServer.authenticate: object expected\");\n                message.authenticate = $root.email_client.AuthenticateRequest.fromObject(object.authenticate);\n            }\n            if (object.loadEmail != null) {\n                if (typeof object.loadEmail !== \"object\")\n                    throw TypeError(\".email_client.ClientToServer.loadEmail: object expected\");\n                message.loadEmail = $root.email_client.LoadEmailRequest.fromObject(object.loadEmail);\n            }\n            if (object.loadAttachment != null) {\n                if (typeof object.loadAttachment !== \"object\")\n                    throw TypeError(\".email_client.ClientToServer.loadAttachment: object expected\");\n                message.loadAttachment = $root.email_client.LoadAttachmentRequest.fromObject(object.loadAttachment);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientToServer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.ClientToServer\n         * @static\n         * @param {email_client.ClientToServer} message ClientToServer\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientToServer.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.loadInbox != null && message.hasOwnProperty(\"loadInbox\")) {\n                object.loadInbox = $root.email_client.LoadInboxRequest.toObject(message.loadInbox, options);\n                if (options.oneofs)\n                    object.message = \"loadInbox\";\n            }\n            if (message.authenticate != null && message.hasOwnProperty(\"authenticate\")) {\n                object.authenticate = $root.email_client.AuthenticateRequest.toObject(message.authenticate, options);\n                if (options.oneofs)\n                    object.message = \"authenticate\";\n            }\n            if (message.loadEmail != null && message.hasOwnProperty(\"loadEmail\")) {\n                object.loadEmail = $root.email_client.LoadEmailRequest.toObject(message.loadEmail, options);\n                if (options.oneofs)\n                    object.message = \"loadEmail\";\n            }\n            if (message.loadAttachment != null && message.hasOwnProperty(\"loadAttachment\")) {\n                object.loadAttachment = $root.email_client.LoadAttachmentRequest.toObject(message.loadAttachment, options);\n                if (options.oneofs)\n                    object.message = \"loadAttachment\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientToServer to JSON.\n         * @function toJSON\n         * @memberof email_client.ClientToServer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientToServer.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ClientToServer;\n    })();\n\n    email_client.ServerToClient = (function() {\n\n        /**\n         * Properties of a ServerToClient.\n         * @memberof email_client\n         * @interface IServerToClient\n         * @property {email_client.IError|null} [error] ServerToClient error\n         * @property {email_client.IAuthenticateRequest|null} [authenticate] ServerToClient authenticate\n         * @property {email_client.ILoadInboxResponse|null} [inbox] ServerToClient inbox\n         * @property {email_client.ILoadEmailResponse|null} [email] ServerToClient email\n         * @property {email_client.ILoadAttachmentResponse|null} [attachment] ServerToClient attachment\n         */\n\n        /**\n         * Constructs a new ServerToClient.\n         * @memberof email_client\n         * @classdesc Represents a ServerToClient.\n         * @implements IServerToClient\n         * @constructor\n         * @param {email_client.IServerToClient=} [properties] Properties to set\n         */\n        function ServerToClient(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerToClient error.\n         * @member {email_client.IError|null|undefined} error\n         * @memberof email_client.ServerToClient\n         * @instance\n         */\n        ServerToClient.prototype.error = null;\n\n        /**\n         * ServerToClient authenticate.\n         * @member {email_client.IAuthenticateRequest|null|undefined} authenticate\n         * @memberof email_client.ServerToClient\n         * @instance\n         */\n        ServerToClient.prototype.authenticate = null;\n\n        /**\n         * ServerToClient inbox.\n         * @member {email_client.ILoadInboxResponse|null|undefined} inbox\n         * @memberof email_client.ServerToClient\n         * @instance\n         */\n        ServerToClient.prototype.inbox = null;\n\n        /**\n         * ServerToClient email.\n         * @member {email_client.ILoadEmailResponse|null|undefined} email\n         * @memberof email_client.ServerToClient\n         * @instance\n         */\n        ServerToClient.prototype.email = null;\n\n        /**\n         * ServerToClient attachment.\n         * @member {email_client.ILoadAttachmentResponse|null|undefined} attachment\n         * @memberof email_client.ServerToClient\n         * @instance\n         */\n        ServerToClient.prototype.attachment = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * ServerToClient message.\n         * @member {\"error\"|\"authenticate\"|\"inbox\"|\"email\"|\"attachment\"|undefined} message\n         * @memberof email_client.ServerToClient\n         * @instance\n         */\n        Object.defineProperty(ServerToClient.prototype, \"message\", {\n            get: $util.oneOfGetter($oneOfFields = [\"error\", \"authenticate\", \"inbox\", \"email\", \"attachment\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerToClient instance using the specified properties.\n         * @function create\n         * @memberof email_client.ServerToClient\n         * @static\n         * @param {email_client.IServerToClient=} [properties] Properties to set\n         * @returns {email_client.ServerToClient} ServerToClient instance\n         */\n        ServerToClient.create = function create(properties) {\n            return new ServerToClient(properties);\n        };\n\n        /**\n         * Encodes the specified ServerToClient message. Does not implicitly {@link email_client.ServerToClient.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.ServerToClient\n         * @static\n         * @param {email_client.IServerToClient} message ServerToClient message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerToClient.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.error != null && message.hasOwnProperty(\"error\"))\n                $root.email_client.Error.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.authenticate != null && message.hasOwnProperty(\"authenticate\"))\n                $root.email_client.AuthenticateRequest.encode(message.authenticate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.inbox != null && message.hasOwnProperty(\"inbox\"))\n                $root.email_client.LoadInboxResponse.encode(message.inbox, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.email != null && message.hasOwnProperty(\"email\"))\n                $root.email_client.LoadEmailResponse.encode(message.email, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.attachment != null && message.hasOwnProperty(\"attachment\"))\n                $root.email_client.LoadAttachmentResponse.encode(message.attachment, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerToClient message, length delimited. Does not implicitly {@link email_client.ServerToClient.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.ServerToClient\n         * @static\n         * @param {email_client.IServerToClient} message ServerToClient message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerToClient.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerToClient message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.ServerToClient\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.ServerToClient} ServerToClient\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerToClient.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.ServerToClient();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.error = $root.email_client.Error.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.authenticate = $root.email_client.AuthenticateRequest.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.inbox = $root.email_client.LoadInboxResponse.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.email = $root.email_client.LoadEmailResponse.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.attachment = $root.email_client.LoadAttachmentResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerToClient message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.ServerToClient\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.ServerToClient} ServerToClient\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerToClient.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerToClient message.\n         * @function verify\n         * @memberof email_client.ServerToClient\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerToClient.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                properties.message = 1;\n                {\n                    var error = $root.email_client.Error.verify(message.error);\n                    if (error)\n                        return \"error.\" + error;\n                }\n            }\n            if (message.authenticate != null && message.hasOwnProperty(\"authenticate\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.email_client.AuthenticateRequest.verify(message.authenticate);\n                    if (error)\n                        return \"authenticate.\" + error;\n                }\n            }\n            if (message.inbox != null && message.hasOwnProperty(\"inbox\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.email_client.LoadInboxResponse.verify(message.inbox);\n                    if (error)\n                        return \"inbox.\" + error;\n                }\n            }\n            if (message.email != null && message.hasOwnProperty(\"email\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.email_client.LoadEmailResponse.verify(message.email);\n                    if (error)\n                        return \"email.\" + error;\n                }\n            }\n            if (message.attachment != null && message.hasOwnProperty(\"attachment\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.email_client.LoadAttachmentResponse.verify(message.attachment);\n                    if (error)\n                        return \"attachment.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerToClient message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.ServerToClient\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.ServerToClient} ServerToClient\n         */\n        ServerToClient.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.ServerToClient)\n                return object;\n            var message = new $root.email_client.ServerToClient();\n            if (object.error != null) {\n                if (typeof object.error !== \"object\")\n                    throw TypeError(\".email_client.ServerToClient.error: object expected\");\n                message.error = $root.email_client.Error.fromObject(object.error);\n            }\n            if (object.authenticate != null) {\n                if (typeof object.authenticate !== \"object\")\n                    throw TypeError(\".email_client.ServerToClient.authenticate: object expected\");\n                message.authenticate = $root.email_client.AuthenticateRequest.fromObject(object.authenticate);\n            }\n            if (object.inbox != null) {\n                if (typeof object.inbox !== \"object\")\n                    throw TypeError(\".email_client.ServerToClient.inbox: object expected\");\n                message.inbox = $root.email_client.LoadInboxResponse.fromObject(object.inbox);\n            }\n            if (object.email != null) {\n                if (typeof object.email !== \"object\")\n                    throw TypeError(\".email_client.ServerToClient.email: object expected\");\n                message.email = $root.email_client.LoadEmailResponse.fromObject(object.email);\n            }\n            if (object.attachment != null) {\n                if (typeof object.attachment !== \"object\")\n                    throw TypeError(\".email_client.ServerToClient.attachment: object expected\");\n                message.attachment = $root.email_client.LoadAttachmentResponse.fromObject(object.attachment);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerToClient message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.ServerToClient\n         * @static\n         * @param {email_client.ServerToClient} message ServerToClient\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerToClient.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                object.error = $root.email_client.Error.toObject(message.error, options);\n                if (options.oneofs)\n                    object.message = \"error\";\n            }\n            if (message.authenticate != null && message.hasOwnProperty(\"authenticate\")) {\n                object.authenticate = $root.email_client.AuthenticateRequest.toObject(message.authenticate, options);\n                if (options.oneofs)\n                    object.message = \"authenticate\";\n            }\n            if (message.inbox != null && message.hasOwnProperty(\"inbox\")) {\n                object.inbox = $root.email_client.LoadInboxResponse.toObject(message.inbox, options);\n                if (options.oneofs)\n                    object.message = \"inbox\";\n            }\n            if (message.email != null && message.hasOwnProperty(\"email\")) {\n                object.email = $root.email_client.LoadEmailResponse.toObject(message.email, options);\n                if (options.oneofs)\n                    object.message = \"email\";\n            }\n            if (message.attachment != null && message.hasOwnProperty(\"attachment\")) {\n                object.attachment = $root.email_client.LoadAttachmentResponse.toObject(message.attachment, options);\n                if (options.oneofs)\n                    object.message = \"attachment\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerToClient to JSON.\n         * @function toJSON\n         * @memberof email_client.ServerToClient\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerToClient.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ServerToClient;\n    })();\n\n    email_client.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof email_client\n         * @interface IError\n         * @property {string|null} [error] Error error\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof email_client\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {email_client.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error error.\n         * @member {string} error\n         * @memberof email_client.Error\n         * @instance\n         */\n        Error.prototype.error = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof email_client.Error\n         * @static\n         * @param {email_client.IError=} [properties] Properties to set\n         * @returns {email_client.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link email_client.Error.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.Error\n         * @static\n         * @param {email_client.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.error != null && message.hasOwnProperty(\"error\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.error);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link email_client.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.Error\n         * @static\n         * @param {email_client.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.Error();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof email_client.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\"))\n                if (!$util.isString(message.error))\n                    return \"error: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Error message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.Error\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.Error} Error\n         */\n        Error.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.Error)\n                return object;\n            var message = new $root.email_client.Error();\n            if (object.error != null)\n                message.error = String(object.error);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.Error\n         * @static\n         * @param {email_client.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.error = \"\";\n            if (message.error != null && message.hasOwnProperty(\"error\"))\n                object.error = message.error;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof email_client.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    email_client.AttachmentHeader = (function() {\n\n        /**\n         * Properties of an AttachmentHeader.\n         * @memberof email_client\n         * @interface IAttachmentHeader\n         * @property {string|null} [id] AttachmentHeader id\n         * @property {string|null} [mimeType] AttachmentHeader mimeType\n         * @property {string|null} [name] AttachmentHeader name\n         * @property {string|null} [contentId] AttachmentHeader contentId\n         */\n\n        /**\n         * Constructs a new AttachmentHeader.\n         * @memberof email_client\n         * @classdesc Represents an AttachmentHeader.\n         * @implements IAttachmentHeader\n         * @constructor\n         * @param {email_client.IAttachmentHeader=} [properties] Properties to set\n         */\n        function AttachmentHeader(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttachmentHeader id.\n         * @member {string} id\n         * @memberof email_client.AttachmentHeader\n         * @instance\n         */\n        AttachmentHeader.prototype.id = \"\";\n\n        /**\n         * AttachmentHeader mimeType.\n         * @member {string} mimeType\n         * @memberof email_client.AttachmentHeader\n         * @instance\n         */\n        AttachmentHeader.prototype.mimeType = \"\";\n\n        /**\n         * AttachmentHeader name.\n         * @member {string} name\n         * @memberof email_client.AttachmentHeader\n         * @instance\n         */\n        AttachmentHeader.prototype.name = \"\";\n\n        /**\n         * AttachmentHeader contentId.\n         * @member {string} contentId\n         * @memberof email_client.AttachmentHeader\n         * @instance\n         */\n        AttachmentHeader.prototype.contentId = \"\";\n\n        /**\n         * Creates a new AttachmentHeader instance using the specified properties.\n         * @function create\n         * @memberof email_client.AttachmentHeader\n         * @static\n         * @param {email_client.IAttachmentHeader=} [properties] Properties to set\n         * @returns {email_client.AttachmentHeader} AttachmentHeader instance\n         */\n        AttachmentHeader.create = function create(properties) {\n            return new AttachmentHeader(properties);\n        };\n\n        /**\n         * Encodes the specified AttachmentHeader message. Does not implicitly {@link email_client.AttachmentHeader.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.AttachmentHeader\n         * @static\n         * @param {email_client.IAttachmentHeader} message AttachmentHeader message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttachmentHeader.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.mimeType != null && message.hasOwnProperty(\"mimeType\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.mimeType);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.contentId != null && message.hasOwnProperty(\"contentId\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.contentId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttachmentHeader message, length delimited. Does not implicitly {@link email_client.AttachmentHeader.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.AttachmentHeader\n         * @static\n         * @param {email_client.IAttachmentHeader} message AttachmentHeader message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttachmentHeader.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttachmentHeader message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.AttachmentHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.AttachmentHeader} AttachmentHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttachmentHeader.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.AttachmentHeader();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.mimeType = reader.string();\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.contentId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttachmentHeader message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.AttachmentHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.AttachmentHeader} AttachmentHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttachmentHeader.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttachmentHeader message.\n         * @function verify\n         * @memberof email_client.AttachmentHeader\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttachmentHeader.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.mimeType != null && message.hasOwnProperty(\"mimeType\"))\n                if (!$util.isString(message.mimeType))\n                    return \"mimeType: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.contentId != null && message.hasOwnProperty(\"contentId\"))\n                if (!$util.isString(message.contentId))\n                    return \"contentId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an AttachmentHeader message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.AttachmentHeader\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.AttachmentHeader} AttachmentHeader\n         */\n        AttachmentHeader.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.AttachmentHeader)\n                return object;\n            var message = new $root.email_client.AttachmentHeader();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.mimeType != null)\n                message.mimeType = String(object.mimeType);\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.contentId != null)\n                message.contentId = String(object.contentId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttachmentHeader message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.AttachmentHeader\n         * @static\n         * @param {email_client.AttachmentHeader} message AttachmentHeader\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttachmentHeader.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.mimeType = \"\";\n                object.name = \"\";\n                object.contentId = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.mimeType != null && message.hasOwnProperty(\"mimeType\"))\n                object.mimeType = message.mimeType;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.contentId != null && message.hasOwnProperty(\"contentId\"))\n                object.contentId = message.contentId;\n            return object;\n        };\n\n        /**\n         * Converts this AttachmentHeader to JSON.\n         * @function toJSON\n         * @memberof email_client.AttachmentHeader\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttachmentHeader.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AttachmentHeader;\n    })();\n\n    email_client.LoadAttachmentRequest = (function() {\n\n        /**\n         * Properties of a LoadAttachmentRequest.\n         * @memberof email_client\n         * @interface ILoadAttachmentRequest\n         * @property {string|null} [id] LoadAttachmentRequest id\n         */\n\n        /**\n         * Constructs a new LoadAttachmentRequest.\n         * @memberof email_client\n         * @classdesc Represents a LoadAttachmentRequest.\n         * @implements ILoadAttachmentRequest\n         * @constructor\n         * @param {email_client.ILoadAttachmentRequest=} [properties] Properties to set\n         */\n        function LoadAttachmentRequest(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoadAttachmentRequest id.\n         * @member {string} id\n         * @memberof email_client.LoadAttachmentRequest\n         * @instance\n         */\n        LoadAttachmentRequest.prototype.id = \"\";\n\n        /**\n         * Creates a new LoadAttachmentRequest instance using the specified properties.\n         * @function create\n         * @memberof email_client.LoadAttachmentRequest\n         * @static\n         * @param {email_client.ILoadAttachmentRequest=} [properties] Properties to set\n         * @returns {email_client.LoadAttachmentRequest} LoadAttachmentRequest instance\n         */\n        LoadAttachmentRequest.create = function create(properties) {\n            return new LoadAttachmentRequest(properties);\n        };\n\n        /**\n         * Encodes the specified LoadAttachmentRequest message. Does not implicitly {@link email_client.LoadAttachmentRequest.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.LoadAttachmentRequest\n         * @static\n         * @param {email_client.ILoadAttachmentRequest} message LoadAttachmentRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadAttachmentRequest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoadAttachmentRequest message, length delimited. Does not implicitly {@link email_client.LoadAttachmentRequest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.LoadAttachmentRequest\n         * @static\n         * @param {email_client.ILoadAttachmentRequest} message LoadAttachmentRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadAttachmentRequest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoadAttachmentRequest message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.LoadAttachmentRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.LoadAttachmentRequest} LoadAttachmentRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadAttachmentRequest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.LoadAttachmentRequest();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoadAttachmentRequest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.LoadAttachmentRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.LoadAttachmentRequest} LoadAttachmentRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadAttachmentRequest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoadAttachmentRequest message.\n         * @function verify\n         * @memberof email_client.LoadAttachmentRequest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoadAttachmentRequest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LoadAttachmentRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.LoadAttachmentRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.LoadAttachmentRequest} LoadAttachmentRequest\n         */\n        LoadAttachmentRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.LoadAttachmentRequest)\n                return object;\n            var message = new $root.email_client.LoadAttachmentRequest();\n            if (object.id != null)\n                message.id = String(object.id);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoadAttachmentRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.LoadAttachmentRequest\n         * @static\n         * @param {email_client.LoadAttachmentRequest} message LoadAttachmentRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoadAttachmentRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.id = \"\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            return object;\n        };\n\n        /**\n         * Converts this LoadAttachmentRequest to JSON.\n         * @function toJSON\n         * @memberof email_client.LoadAttachmentRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoadAttachmentRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoadAttachmentRequest;\n    })();\n\n    email_client.LoadAttachmentResponse = (function() {\n\n        /**\n         * Properties of a LoadAttachmentResponse.\n         * @memberof email_client\n         * @interface ILoadAttachmentResponse\n         * @property {string|null} [id] LoadAttachmentResponse id\n         * @property {Object.<string,string>|null} [headers] LoadAttachmentResponse headers\n         * @property {string|null} [mimeType] LoadAttachmentResponse mimeType\n         * @property {string|null} [name] LoadAttachmentResponse name\n         * @property {string|null} [contentId] LoadAttachmentResponse contentId\n         * @property {Uint8Array|null} [contents] LoadAttachmentResponse contents\n         */\n\n        /**\n         * Constructs a new LoadAttachmentResponse.\n         * @memberof email_client\n         * @classdesc Represents a LoadAttachmentResponse.\n         * @implements ILoadAttachmentResponse\n         * @constructor\n         * @param {email_client.ILoadAttachmentResponse=} [properties] Properties to set\n         */\n        function LoadAttachmentResponse(properties) {\n            this.headers = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoadAttachmentResponse id.\n         * @member {string} id\n         * @memberof email_client.LoadAttachmentResponse\n         * @instance\n         */\n        LoadAttachmentResponse.prototype.id = \"\";\n\n        /**\n         * LoadAttachmentResponse headers.\n         * @member {Object.<string,string>} headers\n         * @memberof email_client.LoadAttachmentResponse\n         * @instance\n         */\n        LoadAttachmentResponse.prototype.headers = $util.emptyObject;\n\n        /**\n         * LoadAttachmentResponse mimeType.\n         * @member {string} mimeType\n         * @memberof email_client.LoadAttachmentResponse\n         * @instance\n         */\n        LoadAttachmentResponse.prototype.mimeType = \"\";\n\n        /**\n         * LoadAttachmentResponse name.\n         * @member {string} name\n         * @memberof email_client.LoadAttachmentResponse\n         * @instance\n         */\n        LoadAttachmentResponse.prototype.name = \"\";\n\n        /**\n         * LoadAttachmentResponse contentId.\n         * @member {string} contentId\n         * @memberof email_client.LoadAttachmentResponse\n         * @instance\n         */\n        LoadAttachmentResponse.prototype.contentId = \"\";\n\n        /**\n         * LoadAttachmentResponse contents.\n         * @member {Uint8Array} contents\n         * @memberof email_client.LoadAttachmentResponse\n         * @instance\n         */\n        LoadAttachmentResponse.prototype.contents = $util.newBuffer([]);\n\n        /**\n         * Creates a new LoadAttachmentResponse instance using the specified properties.\n         * @function create\n         * @memberof email_client.LoadAttachmentResponse\n         * @static\n         * @param {email_client.ILoadAttachmentResponse=} [properties] Properties to set\n         * @returns {email_client.LoadAttachmentResponse} LoadAttachmentResponse instance\n         */\n        LoadAttachmentResponse.create = function create(properties) {\n            return new LoadAttachmentResponse(properties);\n        };\n\n        /**\n         * Encodes the specified LoadAttachmentResponse message. Does not implicitly {@link email_client.LoadAttachmentResponse.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.LoadAttachmentResponse\n         * @static\n         * @param {email_client.ILoadAttachmentResponse} message LoadAttachmentResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadAttachmentResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.headers != null && message.hasOwnProperty(\"headers\"))\n                for (var keys = Object.keys(message.headers), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.headers[keys[i]]).ldelim();\n            if (message.mimeType != null && message.hasOwnProperty(\"mimeType\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.mimeType);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);\n            if (message.contentId != null && message.hasOwnProperty(\"contentId\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.contentId);\n            if (message.contents != null && message.hasOwnProperty(\"contents\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.contents);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoadAttachmentResponse message, length delimited. Does not implicitly {@link email_client.LoadAttachmentResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.LoadAttachmentResponse\n         * @static\n         * @param {email_client.ILoadAttachmentResponse} message LoadAttachmentResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadAttachmentResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoadAttachmentResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.LoadAttachmentResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.LoadAttachmentResponse} LoadAttachmentResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadAttachmentResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.LoadAttachmentResponse(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    reader.skip().pos++;\n                    if (message.headers === $util.emptyObject)\n                        message.headers = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.headers[key] = reader.string();\n                    break;\n                case 3:\n                    message.mimeType = reader.string();\n                    break;\n                case 4:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    message.contentId = reader.string();\n                    break;\n                case 6:\n                    message.contents = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoadAttachmentResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.LoadAttachmentResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.LoadAttachmentResponse} LoadAttachmentResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadAttachmentResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoadAttachmentResponse message.\n         * @function verify\n         * @memberof email_client.LoadAttachmentResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoadAttachmentResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.headers != null && message.hasOwnProperty(\"headers\")) {\n                if (!$util.isObject(message.headers))\n                    return \"headers: object expected\";\n                var key = Object.keys(message.headers);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.headers[key[i]]))\n                        return \"headers: string{k:string} expected\";\n            }\n            if (message.mimeType != null && message.hasOwnProperty(\"mimeType\"))\n                if (!$util.isString(message.mimeType))\n                    return \"mimeType: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.contentId != null && message.hasOwnProperty(\"contentId\"))\n                if (!$util.isString(message.contentId))\n                    return \"contentId: string expected\";\n            if (message.contents != null && message.hasOwnProperty(\"contents\"))\n                if (!(message.contents && typeof message.contents.length === \"number\" || $util.isString(message.contents)))\n                    return \"contents: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LoadAttachmentResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.LoadAttachmentResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.LoadAttachmentResponse} LoadAttachmentResponse\n         */\n        LoadAttachmentResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.LoadAttachmentResponse)\n                return object;\n            var message = new $root.email_client.LoadAttachmentResponse();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.headers) {\n                if (typeof object.headers !== \"object\")\n                    throw TypeError(\".email_client.LoadAttachmentResponse.headers: object expected\");\n                message.headers = {};\n                for (var keys = Object.keys(object.headers), i = 0; i < keys.length; ++i)\n                    message.headers[keys[i]] = String(object.headers[keys[i]]);\n            }\n            if (object.mimeType != null)\n                message.mimeType = String(object.mimeType);\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.contentId != null)\n                message.contentId = String(object.contentId);\n            if (object.contents != null)\n                if (typeof object.contents === \"string\")\n                    $util.base64.decode(object.contents, message.contents = $util.newBuffer($util.base64.length(object.contents)), 0);\n                else if (object.contents.length)\n                    message.contents = object.contents;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoadAttachmentResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.LoadAttachmentResponse\n         * @static\n         * @param {email_client.LoadAttachmentResponse} message LoadAttachmentResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoadAttachmentResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults)\n                object.headers = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.mimeType = \"\";\n                object.name = \"\";\n                object.contentId = \"\";\n                if (options.bytes === String)\n                    object.contents = \"\";\n                else {\n                    object.contents = [];\n                    if (options.bytes !== Array)\n                        object.contents = $util.newBuffer(object.contents);\n                }\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            var keys2;\n            if (message.headers && (keys2 = Object.keys(message.headers)).length) {\n                object.headers = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.headers[keys2[j]] = message.headers[keys2[j]];\n            }\n            if (message.mimeType != null && message.hasOwnProperty(\"mimeType\"))\n                object.mimeType = message.mimeType;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.contentId != null && message.hasOwnProperty(\"contentId\"))\n                object.contentId = message.contentId;\n            if (message.contents != null && message.hasOwnProperty(\"contents\"))\n                object.contents = options.bytes === String ? $util.base64.encode(message.contents, 0, message.contents.length) : options.bytes === Array ? Array.prototype.slice.call(message.contents) : message.contents;\n            return object;\n        };\n\n        /**\n         * Converts this LoadAttachmentResponse to JSON.\n         * @function toJSON\n         * @memberof email_client.LoadAttachmentResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoadAttachmentResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoadAttachmentResponse;\n    })();\n\n    email_client.AuthenticateRequest = (function() {\n\n        /**\n         * Properties of an AuthenticateRequest.\n         * @memberof email_client\n         * @interface IAuthenticateRequest\n         * @property {string|null} [username] AuthenticateRequest username\n         * @property {string|null} [password] AuthenticateRequest password\n         */\n\n        /**\n         * Constructs a new AuthenticateRequest.\n         * @memberof email_client\n         * @classdesc Represents an AuthenticateRequest.\n         * @implements IAuthenticateRequest\n         * @constructor\n         * @param {email_client.IAuthenticateRequest=} [properties] Properties to set\n         */\n        function AuthenticateRequest(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AuthenticateRequest username.\n         * @member {string} username\n         * @memberof email_client.AuthenticateRequest\n         * @instance\n         */\n        AuthenticateRequest.prototype.username = \"\";\n\n        /**\n         * AuthenticateRequest password.\n         * @member {string} password\n         * @memberof email_client.AuthenticateRequest\n         * @instance\n         */\n        AuthenticateRequest.prototype.password = \"\";\n\n        /**\n         * Creates a new AuthenticateRequest instance using the specified properties.\n         * @function create\n         * @memberof email_client.AuthenticateRequest\n         * @static\n         * @param {email_client.IAuthenticateRequest=} [properties] Properties to set\n         * @returns {email_client.AuthenticateRequest} AuthenticateRequest instance\n         */\n        AuthenticateRequest.create = function create(properties) {\n            return new AuthenticateRequest(properties);\n        };\n\n        /**\n         * Encodes the specified AuthenticateRequest message. Does not implicitly {@link email_client.AuthenticateRequest.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.AuthenticateRequest\n         * @static\n         * @param {email_client.IAuthenticateRequest} message AuthenticateRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AuthenticateRequest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.username != null && message.hasOwnProperty(\"username\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);\n            if (message.password != null && message.hasOwnProperty(\"password\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AuthenticateRequest message, length delimited. Does not implicitly {@link email_client.AuthenticateRequest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.AuthenticateRequest\n         * @static\n         * @param {email_client.IAuthenticateRequest} message AuthenticateRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AuthenticateRequest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AuthenticateRequest message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.AuthenticateRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.AuthenticateRequest} AuthenticateRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AuthenticateRequest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.AuthenticateRequest();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.username = reader.string();\n                    break;\n                case 2:\n                    message.password = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AuthenticateRequest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.AuthenticateRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.AuthenticateRequest} AuthenticateRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AuthenticateRequest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AuthenticateRequest message.\n         * @function verify\n         * @memberof email_client.AuthenticateRequest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AuthenticateRequest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.username != null && message.hasOwnProperty(\"username\"))\n                if (!$util.isString(message.username))\n                    return \"username: string expected\";\n            if (message.password != null && message.hasOwnProperty(\"password\"))\n                if (!$util.isString(message.password))\n                    return \"password: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an AuthenticateRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.AuthenticateRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.AuthenticateRequest} AuthenticateRequest\n         */\n        AuthenticateRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.AuthenticateRequest)\n                return object;\n            var message = new $root.email_client.AuthenticateRequest();\n            if (object.username != null)\n                message.username = String(object.username);\n            if (object.password != null)\n                message.password = String(object.password);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AuthenticateRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.AuthenticateRequest\n         * @static\n         * @param {email_client.AuthenticateRequest} message AuthenticateRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AuthenticateRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.username = \"\";\n                object.password = \"\";\n            }\n            if (message.username != null && message.hasOwnProperty(\"username\"))\n                object.username = message.username;\n            if (message.password != null && message.hasOwnProperty(\"password\"))\n                object.password = message.password;\n            return object;\n        };\n\n        /**\n         * Converts this AuthenticateRequest to JSON.\n         * @function toJSON\n         * @memberof email_client.AuthenticateRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AuthenticateRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AuthenticateRequest;\n    })();\n\n    email_client.AuthenticateResponse = (function() {\n\n        /**\n         * Properties of an AuthenticateResponse.\n         * @memberof email_client\n         * @interface IAuthenticateResponse\n         * @property {boolean|null} [success] AuthenticateResponse success\n         */\n\n        /**\n         * Constructs a new AuthenticateResponse.\n         * @memberof email_client\n         * @classdesc Represents an AuthenticateResponse.\n         * @implements IAuthenticateResponse\n         * @constructor\n         * @param {email_client.IAuthenticateResponse=} [properties] Properties to set\n         */\n        function AuthenticateResponse(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AuthenticateResponse success.\n         * @member {boolean} success\n         * @memberof email_client.AuthenticateResponse\n         * @instance\n         */\n        AuthenticateResponse.prototype.success = false;\n\n        /**\n         * Creates a new AuthenticateResponse instance using the specified properties.\n         * @function create\n         * @memberof email_client.AuthenticateResponse\n         * @static\n         * @param {email_client.IAuthenticateResponse=} [properties] Properties to set\n         * @returns {email_client.AuthenticateResponse} AuthenticateResponse instance\n         */\n        AuthenticateResponse.create = function create(properties) {\n            return new AuthenticateResponse(properties);\n        };\n\n        /**\n         * Encodes the specified AuthenticateResponse message. Does not implicitly {@link email_client.AuthenticateResponse.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.AuthenticateResponse\n         * @static\n         * @param {email_client.IAuthenticateResponse} message AuthenticateResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AuthenticateResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AuthenticateResponse message, length delimited. Does not implicitly {@link email_client.AuthenticateResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.AuthenticateResponse\n         * @static\n         * @param {email_client.IAuthenticateResponse} message AuthenticateResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AuthenticateResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AuthenticateResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.AuthenticateResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.AuthenticateResponse} AuthenticateResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AuthenticateResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.AuthenticateResponse();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.success = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AuthenticateResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.AuthenticateResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.AuthenticateResponse} AuthenticateResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AuthenticateResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AuthenticateResponse message.\n         * @function verify\n         * @memberof email_client.AuthenticateResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AuthenticateResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                if (typeof message.success !== \"boolean\")\n                    return \"success: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates an AuthenticateResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.AuthenticateResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.AuthenticateResponse} AuthenticateResponse\n         */\n        AuthenticateResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.AuthenticateResponse)\n                return object;\n            var message = new $root.email_client.AuthenticateResponse();\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AuthenticateResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.AuthenticateResponse\n         * @static\n         * @param {email_client.AuthenticateResponse} message AuthenticateResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AuthenticateResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.success = false;\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            return object;\n        };\n\n        /**\n         * Converts this AuthenticateResponse to JSON.\n         * @function toJSON\n         * @memberof email_client.AuthenticateResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AuthenticateResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AuthenticateResponse;\n    })();\n\n    email_client.EmailHeader = (function() {\n\n        /**\n         * Properties of an EmailHeader.\n         * @memberof email_client\n         * @interface IEmailHeader\n         * @property {string|null} [id] EmailHeader id\n         * @property {string|null} [inboxId] EmailHeader inboxId\n         * @property {string|null} [from] EmailHeader from\n         * @property {string|null} [to] EmailHeader to\n         * @property {string|null} [subject] EmailHeader subject\n         * @property {boolean|null} [read] EmailHeader read\n         */\n\n        /**\n         * Constructs a new EmailHeader.\n         * @memberof email_client\n         * @classdesc Represents an EmailHeader.\n         * @implements IEmailHeader\n         * @constructor\n         * @param {email_client.IEmailHeader=} [properties] Properties to set\n         */\n        function EmailHeader(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * EmailHeader id.\n         * @member {string} id\n         * @memberof email_client.EmailHeader\n         * @instance\n         */\n        EmailHeader.prototype.id = \"\";\n\n        /**\n         * EmailHeader inboxId.\n         * @member {string} inboxId\n         * @memberof email_client.EmailHeader\n         * @instance\n         */\n        EmailHeader.prototype.inboxId = \"\";\n\n        /**\n         * EmailHeader from.\n         * @member {string} from\n         * @memberof email_client.EmailHeader\n         * @instance\n         */\n        EmailHeader.prototype.from = \"\";\n\n        /**\n         * EmailHeader to.\n         * @member {string} to\n         * @memberof email_client.EmailHeader\n         * @instance\n         */\n        EmailHeader.prototype.to = \"\";\n\n        /**\n         * EmailHeader subject.\n         * @member {string} subject\n         * @memberof email_client.EmailHeader\n         * @instance\n         */\n        EmailHeader.prototype.subject = \"\";\n\n        /**\n         * EmailHeader read.\n         * @member {boolean} read\n         * @memberof email_client.EmailHeader\n         * @instance\n         */\n        EmailHeader.prototype.read = false;\n\n        /**\n         * Creates a new EmailHeader instance using the specified properties.\n         * @function create\n         * @memberof email_client.EmailHeader\n         * @static\n         * @param {email_client.IEmailHeader=} [properties] Properties to set\n         * @returns {email_client.EmailHeader} EmailHeader instance\n         */\n        EmailHeader.create = function create(properties) {\n            return new EmailHeader(properties);\n        };\n\n        /**\n         * Encodes the specified EmailHeader message. Does not implicitly {@link email_client.EmailHeader.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.EmailHeader\n         * @static\n         * @param {email_client.IEmailHeader} message EmailHeader message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EmailHeader.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.inboxId != null && message.hasOwnProperty(\"inboxId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.inboxId);\n            if (message.from != null && message.hasOwnProperty(\"from\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.from);\n            if (message.to != null && message.hasOwnProperty(\"to\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.to);\n            if (message.subject != null && message.hasOwnProperty(\"subject\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subject);\n            if (message.read != null && message.hasOwnProperty(\"read\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.read);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified EmailHeader message, length delimited. Does not implicitly {@link email_client.EmailHeader.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.EmailHeader\n         * @static\n         * @param {email_client.IEmailHeader} message EmailHeader message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EmailHeader.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an EmailHeader message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.EmailHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.EmailHeader} EmailHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EmailHeader.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.EmailHeader();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.inboxId = reader.string();\n                    break;\n                case 3:\n                    message.from = reader.string();\n                    break;\n                case 4:\n                    message.to = reader.string();\n                    break;\n                case 5:\n                    message.subject = reader.string();\n                    break;\n                case 6:\n                    message.read = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an EmailHeader message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.EmailHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.EmailHeader} EmailHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EmailHeader.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an EmailHeader message.\n         * @function verify\n         * @memberof email_client.EmailHeader\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EmailHeader.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.inboxId != null && message.hasOwnProperty(\"inboxId\"))\n                if (!$util.isString(message.inboxId))\n                    return \"inboxId: string expected\";\n            if (message.from != null && message.hasOwnProperty(\"from\"))\n                if (!$util.isString(message.from))\n                    return \"from: string expected\";\n            if (message.to != null && message.hasOwnProperty(\"to\"))\n                if (!$util.isString(message.to))\n                    return \"to: string expected\";\n            if (message.subject != null && message.hasOwnProperty(\"subject\"))\n                if (!$util.isString(message.subject))\n                    return \"subject: string expected\";\n            if (message.read != null && message.hasOwnProperty(\"read\"))\n                if (typeof message.read !== \"boolean\")\n                    return \"read: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates an EmailHeader message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.EmailHeader\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.EmailHeader} EmailHeader\n         */\n        EmailHeader.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.EmailHeader)\n                return object;\n            var message = new $root.email_client.EmailHeader();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.inboxId != null)\n                message.inboxId = String(object.inboxId);\n            if (object.from != null)\n                message.from = String(object.from);\n            if (object.to != null)\n                message.to = String(object.to);\n            if (object.subject != null)\n                message.subject = String(object.subject);\n            if (object.read != null)\n                message.read = Boolean(object.read);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an EmailHeader message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.EmailHeader\n         * @static\n         * @param {email_client.EmailHeader} message EmailHeader\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EmailHeader.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.inboxId = \"\";\n                object.from = \"\";\n                object.to = \"\";\n                object.subject = \"\";\n                object.read = false;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.inboxId != null && message.hasOwnProperty(\"inboxId\"))\n                object.inboxId = message.inboxId;\n            if (message.from != null && message.hasOwnProperty(\"from\"))\n                object.from = message.from;\n            if (message.to != null && message.hasOwnProperty(\"to\"))\n                object.to = message.to;\n            if (message.subject != null && message.hasOwnProperty(\"subject\"))\n                object.subject = message.subject;\n            if (message.read != null && message.hasOwnProperty(\"read\"))\n                object.read = message.read;\n            return object;\n        };\n\n        /**\n         * Converts this EmailHeader to JSON.\n         * @function toJSON\n         * @memberof email_client.EmailHeader\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EmailHeader.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return EmailHeader;\n    })();\n\n    email_client.LoadEmailRequest = (function() {\n\n        /**\n         * Properties of a LoadEmailRequest.\n         * @memberof email_client\n         * @interface ILoadEmailRequest\n         * @property {string|null} [id] LoadEmailRequest id\n         */\n\n        /**\n         * Constructs a new LoadEmailRequest.\n         * @memberof email_client\n         * @classdesc Represents a LoadEmailRequest.\n         * @implements ILoadEmailRequest\n         * @constructor\n         * @param {email_client.ILoadEmailRequest=} [properties] Properties to set\n         */\n        function LoadEmailRequest(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoadEmailRequest id.\n         * @member {string} id\n         * @memberof email_client.LoadEmailRequest\n         * @instance\n         */\n        LoadEmailRequest.prototype.id = \"\";\n\n        /**\n         * Creates a new LoadEmailRequest instance using the specified properties.\n         * @function create\n         * @memberof email_client.LoadEmailRequest\n         * @static\n         * @param {email_client.ILoadEmailRequest=} [properties] Properties to set\n         * @returns {email_client.LoadEmailRequest} LoadEmailRequest instance\n         */\n        LoadEmailRequest.create = function create(properties) {\n            return new LoadEmailRequest(properties);\n        };\n\n        /**\n         * Encodes the specified LoadEmailRequest message. Does not implicitly {@link email_client.LoadEmailRequest.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.LoadEmailRequest\n         * @static\n         * @param {email_client.ILoadEmailRequest} message LoadEmailRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadEmailRequest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoadEmailRequest message, length delimited. Does not implicitly {@link email_client.LoadEmailRequest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.LoadEmailRequest\n         * @static\n         * @param {email_client.ILoadEmailRequest} message LoadEmailRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadEmailRequest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoadEmailRequest message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.LoadEmailRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.LoadEmailRequest} LoadEmailRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadEmailRequest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.LoadEmailRequest();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoadEmailRequest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.LoadEmailRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.LoadEmailRequest} LoadEmailRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadEmailRequest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoadEmailRequest message.\n         * @function verify\n         * @memberof email_client.LoadEmailRequest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoadEmailRequest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LoadEmailRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.LoadEmailRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.LoadEmailRequest} LoadEmailRequest\n         */\n        LoadEmailRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.LoadEmailRequest)\n                return object;\n            var message = new $root.email_client.LoadEmailRequest();\n            if (object.id != null)\n                message.id = String(object.id);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoadEmailRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.LoadEmailRequest\n         * @static\n         * @param {email_client.LoadEmailRequest} message LoadEmailRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoadEmailRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.id = \"\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            return object;\n        };\n\n        /**\n         * Converts this LoadEmailRequest to JSON.\n         * @function toJSON\n         * @memberof email_client.LoadEmailRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoadEmailRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoadEmailRequest;\n    })();\n\n    email_client.LoadEmailResponse = (function() {\n\n        /**\n         * Properties of a LoadEmailResponse.\n         * @memberof email_client\n         * @interface ILoadEmailResponse\n         * @property {string|null} [id] LoadEmailResponse id\n         * @property {string|null} [inboxId] LoadEmailResponse inboxId\n         * @property {string|null} [from] LoadEmailResponse from\n         * @property {string|null} [to] LoadEmailResponse to\n         * @property {string|null} [subject] LoadEmailResponse subject\n         * @property {boolean|null} [read] LoadEmailResponse read\n         * @property {number|null} [imapIndex] LoadEmailResponse imapIndex\n         * @property {string|null} [textPlainBody] LoadEmailResponse textPlainBody\n         * @property {string|null} [htmlBody] LoadEmailResponse htmlBody\n         * @property {Object.<string,string>|null} [headers] LoadEmailResponse headers\n         * @property {Array.<email_client.IAttachmentHeader>|null} [attachments] LoadEmailResponse attachments\n         */\n\n        /**\n         * Constructs a new LoadEmailResponse.\n         * @memberof email_client\n         * @classdesc Represents a LoadEmailResponse.\n         * @implements ILoadEmailResponse\n         * @constructor\n         * @param {email_client.ILoadEmailResponse=} [properties] Properties to set\n         */\n        function LoadEmailResponse(properties) {\n            this.headers = {};\n            this.attachments = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoadEmailResponse id.\n         * @member {string} id\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.id = \"\";\n\n        /**\n         * LoadEmailResponse inboxId.\n         * @member {string} inboxId\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.inboxId = \"\";\n\n        /**\n         * LoadEmailResponse from.\n         * @member {string} from\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.from = \"\";\n\n        /**\n         * LoadEmailResponse to.\n         * @member {string} to\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.to = \"\";\n\n        /**\n         * LoadEmailResponse subject.\n         * @member {string} subject\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.subject = \"\";\n\n        /**\n         * LoadEmailResponse read.\n         * @member {boolean} read\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.read = false;\n\n        /**\n         * LoadEmailResponse imapIndex.\n         * @member {number} imapIndex\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.imapIndex = 0;\n\n        /**\n         * LoadEmailResponse textPlainBody.\n         * @member {string} textPlainBody\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.textPlainBody = \"\";\n\n        /**\n         * LoadEmailResponse htmlBody.\n         * @member {string} htmlBody\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.htmlBody = \"\";\n\n        /**\n         * LoadEmailResponse headers.\n         * @member {Object.<string,string>} headers\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.headers = $util.emptyObject;\n\n        /**\n         * LoadEmailResponse attachments.\n         * @member {Array.<email_client.IAttachmentHeader>} attachments\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         */\n        LoadEmailResponse.prototype.attachments = $util.emptyArray;\n\n        /**\n         * Creates a new LoadEmailResponse instance using the specified properties.\n         * @function create\n         * @memberof email_client.LoadEmailResponse\n         * @static\n         * @param {email_client.ILoadEmailResponse=} [properties] Properties to set\n         * @returns {email_client.LoadEmailResponse} LoadEmailResponse instance\n         */\n        LoadEmailResponse.create = function create(properties) {\n            return new LoadEmailResponse(properties);\n        };\n\n        /**\n         * Encodes the specified LoadEmailResponse message. Does not implicitly {@link email_client.LoadEmailResponse.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.LoadEmailResponse\n         * @static\n         * @param {email_client.ILoadEmailResponse} message LoadEmailResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadEmailResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.inboxId != null && message.hasOwnProperty(\"inboxId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.inboxId);\n            if (message.from != null && message.hasOwnProperty(\"from\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.from);\n            if (message.to != null && message.hasOwnProperty(\"to\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.to);\n            if (message.subject != null && message.hasOwnProperty(\"subject\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subject);\n            if (message.read != null && message.hasOwnProperty(\"read\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.read);\n            if (message.imapIndex != null && message.hasOwnProperty(\"imapIndex\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.imapIndex);\n            if (message.textPlainBody != null && message.hasOwnProperty(\"textPlainBody\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.textPlainBody);\n            if (message.htmlBody != null && message.hasOwnProperty(\"htmlBody\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).string(message.htmlBody);\n            if (message.headers != null && message.hasOwnProperty(\"headers\"))\n                for (var keys = Object.keys(message.headers), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.headers[keys[i]]).ldelim();\n            if (message.attachments != null && message.attachments.length)\n                for (var i = 0; i < message.attachments.length; ++i)\n                    $root.email_client.AttachmentHeader.encode(message.attachments[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoadEmailResponse message, length delimited. Does not implicitly {@link email_client.LoadEmailResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.LoadEmailResponse\n         * @static\n         * @param {email_client.ILoadEmailResponse} message LoadEmailResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadEmailResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoadEmailResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.LoadEmailResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.LoadEmailResponse} LoadEmailResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadEmailResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.LoadEmailResponse(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.inboxId = reader.string();\n                    break;\n                case 3:\n                    message.from = reader.string();\n                    break;\n                case 4:\n                    message.to = reader.string();\n                    break;\n                case 5:\n                    message.subject = reader.string();\n                    break;\n                case 6:\n                    message.read = reader.bool();\n                    break;\n                case 7:\n                    message.imapIndex = reader.int32();\n                    break;\n                case 8:\n                    message.textPlainBody = reader.string();\n                    break;\n                case 9:\n                    message.htmlBody = reader.string();\n                    break;\n                case 10:\n                    reader.skip().pos++;\n                    if (message.headers === $util.emptyObject)\n                        message.headers = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.headers[key] = reader.string();\n                    break;\n                case 11:\n                    if (!(message.attachments && message.attachments.length))\n                        message.attachments = [];\n                    message.attachments.push($root.email_client.AttachmentHeader.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoadEmailResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.LoadEmailResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.LoadEmailResponse} LoadEmailResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadEmailResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoadEmailResponse message.\n         * @function verify\n         * @memberof email_client.LoadEmailResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoadEmailResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.inboxId != null && message.hasOwnProperty(\"inboxId\"))\n                if (!$util.isString(message.inboxId))\n                    return \"inboxId: string expected\";\n            if (message.from != null && message.hasOwnProperty(\"from\"))\n                if (!$util.isString(message.from))\n                    return \"from: string expected\";\n            if (message.to != null && message.hasOwnProperty(\"to\"))\n                if (!$util.isString(message.to))\n                    return \"to: string expected\";\n            if (message.subject != null && message.hasOwnProperty(\"subject\"))\n                if (!$util.isString(message.subject))\n                    return \"subject: string expected\";\n            if (message.read != null && message.hasOwnProperty(\"read\"))\n                if (typeof message.read !== \"boolean\")\n                    return \"read: boolean expected\";\n            if (message.imapIndex != null && message.hasOwnProperty(\"imapIndex\"))\n                if (!$util.isInteger(message.imapIndex))\n                    return \"imapIndex: integer expected\";\n            if (message.textPlainBody != null && message.hasOwnProperty(\"textPlainBody\"))\n                if (!$util.isString(message.textPlainBody))\n                    return \"textPlainBody: string expected\";\n            if (message.htmlBody != null && message.hasOwnProperty(\"htmlBody\"))\n                if (!$util.isString(message.htmlBody))\n                    return \"htmlBody: string expected\";\n            if (message.headers != null && message.hasOwnProperty(\"headers\")) {\n                if (!$util.isObject(message.headers))\n                    return \"headers: object expected\";\n                var key = Object.keys(message.headers);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.headers[key[i]]))\n                        return \"headers: string{k:string} expected\";\n            }\n            if (message.attachments != null && message.hasOwnProperty(\"attachments\")) {\n                if (!Array.isArray(message.attachments))\n                    return \"attachments: array expected\";\n                for (var i = 0; i < message.attachments.length; ++i) {\n                    var error = $root.email_client.AttachmentHeader.verify(message.attachments[i]);\n                    if (error)\n                        return \"attachments.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a LoadEmailResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.LoadEmailResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.LoadEmailResponse} LoadEmailResponse\n         */\n        LoadEmailResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.LoadEmailResponse)\n                return object;\n            var message = new $root.email_client.LoadEmailResponse();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.inboxId != null)\n                message.inboxId = String(object.inboxId);\n            if (object.from != null)\n                message.from = String(object.from);\n            if (object.to != null)\n                message.to = String(object.to);\n            if (object.subject != null)\n                message.subject = String(object.subject);\n            if (object.read != null)\n                message.read = Boolean(object.read);\n            if (object.imapIndex != null)\n                message.imapIndex = object.imapIndex | 0;\n            if (object.textPlainBody != null)\n                message.textPlainBody = String(object.textPlainBody);\n            if (object.htmlBody != null)\n                message.htmlBody = String(object.htmlBody);\n            if (object.headers) {\n                if (typeof object.headers !== \"object\")\n                    throw TypeError(\".email_client.LoadEmailResponse.headers: object expected\");\n                message.headers = {};\n                for (var keys = Object.keys(object.headers), i = 0; i < keys.length; ++i)\n                    message.headers[keys[i]] = String(object.headers[keys[i]]);\n            }\n            if (object.attachments) {\n                if (!Array.isArray(object.attachments))\n                    throw TypeError(\".email_client.LoadEmailResponse.attachments: array expected\");\n                message.attachments = [];\n                for (var i = 0; i < object.attachments.length; ++i) {\n                    if (typeof object.attachments[i] !== \"object\")\n                        throw TypeError(\".email_client.LoadEmailResponse.attachments: object expected\");\n                    message.attachments[i] = $root.email_client.AttachmentHeader.fromObject(object.attachments[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoadEmailResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.LoadEmailResponse\n         * @static\n         * @param {email_client.LoadEmailResponse} message LoadEmailResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoadEmailResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.attachments = [];\n            if (options.objects || options.defaults)\n                object.headers = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.inboxId = \"\";\n                object.from = \"\";\n                object.to = \"\";\n                object.subject = \"\";\n                object.read = false;\n                object.imapIndex = 0;\n                object.textPlainBody = \"\";\n                object.htmlBody = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.inboxId != null && message.hasOwnProperty(\"inboxId\"))\n                object.inboxId = message.inboxId;\n            if (message.from != null && message.hasOwnProperty(\"from\"))\n                object.from = message.from;\n            if (message.to != null && message.hasOwnProperty(\"to\"))\n                object.to = message.to;\n            if (message.subject != null && message.hasOwnProperty(\"subject\"))\n                object.subject = message.subject;\n            if (message.read != null && message.hasOwnProperty(\"read\"))\n                object.read = message.read;\n            if (message.imapIndex != null && message.hasOwnProperty(\"imapIndex\"))\n                object.imapIndex = message.imapIndex;\n            if (message.textPlainBody != null && message.hasOwnProperty(\"textPlainBody\"))\n                object.textPlainBody = message.textPlainBody;\n            if (message.htmlBody != null && message.hasOwnProperty(\"htmlBody\"))\n                object.htmlBody = message.htmlBody;\n            var keys2;\n            if (message.headers && (keys2 = Object.keys(message.headers)).length) {\n                object.headers = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.headers[keys2[j]] = message.headers[keys2[j]];\n            }\n            if (message.attachments && message.attachments.length) {\n                object.attachments = [];\n                for (var j = 0; j < message.attachments.length; ++j)\n                    object.attachments[j] = $root.email_client.AttachmentHeader.toObject(message.attachments[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this LoadEmailResponse to JSON.\n         * @function toJSON\n         * @memberof email_client.LoadEmailResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoadEmailResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoadEmailResponse;\n    })();\n\n    email_client.LoadInboxRequest = (function() {\n\n        /**\n         * Properties of a LoadInboxRequest.\n         * @memberof email_client\n         * @interface ILoadInboxRequest\n         * @property {string|null} [id] LoadInboxRequest id\n         */\n\n        /**\n         * Constructs a new LoadInboxRequest.\n         * @memberof email_client\n         * @classdesc Represents a LoadInboxRequest.\n         * @implements ILoadInboxRequest\n         * @constructor\n         * @param {email_client.ILoadInboxRequest=} [properties] Properties to set\n         */\n        function LoadInboxRequest(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoadInboxRequest id.\n         * @member {string} id\n         * @memberof email_client.LoadInboxRequest\n         * @instance\n         */\n        LoadInboxRequest.prototype.id = \"\";\n\n        /**\n         * Creates a new LoadInboxRequest instance using the specified properties.\n         * @function create\n         * @memberof email_client.LoadInboxRequest\n         * @static\n         * @param {email_client.ILoadInboxRequest=} [properties] Properties to set\n         * @returns {email_client.LoadInboxRequest} LoadInboxRequest instance\n         */\n        LoadInboxRequest.create = function create(properties) {\n            return new LoadInboxRequest(properties);\n        };\n\n        /**\n         * Encodes the specified LoadInboxRequest message. Does not implicitly {@link email_client.LoadInboxRequest.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.LoadInboxRequest\n         * @static\n         * @param {email_client.ILoadInboxRequest} message LoadInboxRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadInboxRequest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoadInboxRequest message, length delimited. Does not implicitly {@link email_client.LoadInboxRequest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.LoadInboxRequest\n         * @static\n         * @param {email_client.ILoadInboxRequest} message LoadInboxRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadInboxRequest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoadInboxRequest message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.LoadInboxRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.LoadInboxRequest} LoadInboxRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadInboxRequest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.LoadInboxRequest();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoadInboxRequest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.LoadInboxRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.LoadInboxRequest} LoadInboxRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadInboxRequest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoadInboxRequest message.\n         * @function verify\n         * @memberof email_client.LoadInboxRequest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoadInboxRequest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LoadInboxRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.LoadInboxRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.LoadInboxRequest} LoadInboxRequest\n         */\n        LoadInboxRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.LoadInboxRequest)\n                return object;\n            var message = new $root.email_client.LoadInboxRequest();\n            if (object.id != null)\n                message.id = String(object.id);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoadInboxRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.LoadInboxRequest\n         * @static\n         * @param {email_client.LoadInboxRequest} message LoadInboxRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoadInboxRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.id = \"\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            return object;\n        };\n\n        /**\n         * Converts this LoadInboxRequest to JSON.\n         * @function toJSON\n         * @memberof email_client.LoadInboxRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoadInboxRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoadInboxRequest;\n    })();\n\n    email_client.LoadInboxResponse = (function() {\n\n        /**\n         * Properties of a LoadInboxResponse.\n         * @memberof email_client\n         * @interface ILoadInboxResponse\n         * @property {string|null} [id] LoadInboxResponse id\n         * @property {string|null} [name] LoadInboxResponse name\n         * @property {Array.<string>|null} [addresses] LoadInboxResponse addresses\n         * @property {number|null} [unreadCount] LoadInboxResponse unreadCount\n         * @property {Array.<email_client.IEmailHeader>|null} [emails] LoadInboxResponse emails\n         */\n\n        /**\n         * Constructs a new LoadInboxResponse.\n         * @memberof email_client\n         * @classdesc Represents a LoadInboxResponse.\n         * @implements ILoadInboxResponse\n         * @constructor\n         * @param {email_client.ILoadInboxResponse=} [properties] Properties to set\n         */\n        function LoadInboxResponse(properties) {\n            this.addresses = [];\n            this.emails = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoadInboxResponse id.\n         * @member {string} id\n         * @memberof email_client.LoadInboxResponse\n         * @instance\n         */\n        LoadInboxResponse.prototype.id = \"\";\n\n        /**\n         * LoadInboxResponse name.\n         * @member {string} name\n         * @memberof email_client.LoadInboxResponse\n         * @instance\n         */\n        LoadInboxResponse.prototype.name = \"\";\n\n        /**\n         * LoadInboxResponse addresses.\n         * @member {Array.<string>} addresses\n         * @memberof email_client.LoadInboxResponse\n         * @instance\n         */\n        LoadInboxResponse.prototype.addresses = $util.emptyArray;\n\n        /**\n         * LoadInboxResponse unreadCount.\n         * @member {number} unreadCount\n         * @memberof email_client.LoadInboxResponse\n         * @instance\n         */\n        LoadInboxResponse.prototype.unreadCount = 0;\n\n        /**\n         * LoadInboxResponse emails.\n         * @member {Array.<email_client.IEmailHeader>} emails\n         * @memberof email_client.LoadInboxResponse\n         * @instance\n         */\n        LoadInboxResponse.prototype.emails = $util.emptyArray;\n\n        /**\n         * Creates a new LoadInboxResponse instance using the specified properties.\n         * @function create\n         * @memberof email_client.LoadInboxResponse\n         * @static\n         * @param {email_client.ILoadInboxResponse=} [properties] Properties to set\n         * @returns {email_client.LoadInboxResponse} LoadInboxResponse instance\n         */\n        LoadInboxResponse.create = function create(properties) {\n            return new LoadInboxResponse(properties);\n        };\n\n        /**\n         * Encodes the specified LoadInboxResponse message. Does not implicitly {@link email_client.LoadInboxResponse.verify|verify} messages.\n         * @function encode\n         * @memberof email_client.LoadInboxResponse\n         * @static\n         * @param {email_client.ILoadInboxResponse} message LoadInboxResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadInboxResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.addresses != null && message.addresses.length)\n                for (var i = 0; i < message.addresses.length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.addresses[i]);\n            if (message.unreadCount != null && message.hasOwnProperty(\"unreadCount\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.unreadCount);\n            if (message.emails != null && message.emails.length)\n                for (var i = 0; i < message.emails.length; ++i)\n                    $root.email_client.EmailHeader.encode(message.emails[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoadInboxResponse message, length delimited. Does not implicitly {@link email_client.LoadInboxResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof email_client.LoadInboxResponse\n         * @static\n         * @param {email_client.ILoadInboxResponse} message LoadInboxResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoadInboxResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoadInboxResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof email_client.LoadInboxResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {email_client.LoadInboxResponse} LoadInboxResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadInboxResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.email_client.LoadInboxResponse();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    if (!(message.addresses && message.addresses.length))\n                        message.addresses = [];\n                    message.addresses.push(reader.string());\n                    break;\n                case 4:\n                    message.unreadCount = reader.int32();\n                    break;\n                case 5:\n                    if (!(message.emails && message.emails.length))\n                        message.emails = [];\n                    message.emails.push($root.email_client.EmailHeader.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoadInboxResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof email_client.LoadInboxResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {email_client.LoadInboxResponse} LoadInboxResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoadInboxResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoadInboxResponse message.\n         * @function verify\n         * @memberof email_client.LoadInboxResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoadInboxResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.addresses != null && message.hasOwnProperty(\"addresses\")) {\n                if (!Array.isArray(message.addresses))\n                    return \"addresses: array expected\";\n                for (var i = 0; i < message.addresses.length; ++i)\n                    if (!$util.isString(message.addresses[i]))\n                        return \"addresses: string[] expected\";\n            }\n            if (message.unreadCount != null && message.hasOwnProperty(\"unreadCount\"))\n                if (!$util.isInteger(message.unreadCount))\n                    return \"unreadCount: integer expected\";\n            if (message.emails != null && message.hasOwnProperty(\"emails\")) {\n                if (!Array.isArray(message.emails))\n                    return \"emails: array expected\";\n                for (var i = 0; i < message.emails.length; ++i) {\n                    var error = $root.email_client.EmailHeader.verify(message.emails[i]);\n                    if (error)\n                        return \"emails.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a LoadInboxResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof email_client.LoadInboxResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {email_client.LoadInboxResponse} LoadInboxResponse\n         */\n        LoadInboxResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.email_client.LoadInboxResponse)\n                return object;\n            var message = new $root.email_client.LoadInboxResponse();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.addresses) {\n                if (!Array.isArray(object.addresses))\n                    throw TypeError(\".email_client.LoadInboxResponse.addresses: array expected\");\n                message.addresses = [];\n                for (var i = 0; i < object.addresses.length; ++i)\n                    message.addresses[i] = String(object.addresses[i]);\n            }\n            if (object.unreadCount != null)\n                message.unreadCount = object.unreadCount | 0;\n            if (object.emails) {\n                if (!Array.isArray(object.emails))\n                    throw TypeError(\".email_client.LoadInboxResponse.emails: array expected\");\n                message.emails = [];\n                for (var i = 0; i < object.emails.length; ++i) {\n                    if (typeof object.emails[i] !== \"object\")\n                        throw TypeError(\".email_client.LoadInboxResponse.emails: object expected\");\n                    message.emails[i] = $root.email_client.EmailHeader.fromObject(object.emails[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoadInboxResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof email_client.LoadInboxResponse\n         * @static\n         * @param {email_client.LoadInboxResponse} message LoadInboxResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoadInboxResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.addresses = [];\n                object.emails = [];\n            }\n            if (options.defaults) {\n                object.id = \"\";\n                object.name = \"\";\n                object.unreadCount = 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.addresses && message.addresses.length) {\n                object.addresses = [];\n                for (var j = 0; j < message.addresses.length; ++j)\n                    object.addresses[j] = message.addresses[j];\n            }\n            if (message.unreadCount != null && message.hasOwnProperty(\"unreadCount\"))\n                object.unreadCount = message.unreadCount;\n            if (message.emails && message.emails.length) {\n                object.emails = [];\n                for (var j = 0; j < message.emails.length; ++j)\n                    object.emails[j] = $root.email_client.EmailHeader.toObject(message.emails[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this LoadInboxResponse to JSON.\n         * @function toJSON\n         * @memberof email_client.LoadInboxResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoadInboxResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoadInboxResponse;\n    })();\n\n    return email_client;\n})();\n\nmodule.exports = $root;\n","import { email_client } from \"./protobuf_compiled\";\n\ninterface HandlerListener {\n    email_received(email: server.EmailInfo): void;\n    email_loaded(email: server.Email): void;\n    attachment_loaded(attachment: server.Attachment): void;\n    inbox_loaded(address: server.Inbox, email: server.EmailInfo[]): void;\n    setup(addresses: server.Inbox[]): void;\n    authenticate_result(authenticated: boolean): void;\n}\n\nexport class Handler {\n    private socket: WebSocket | null;\n    private reconnect_timeout: NodeJS.Timer | null;\n    private handler: HandlerListener;\n    private current_inbox: server.Inbox | null;\n\n    constructor(handler: HandlerListener) {\n        this.socket = null;\n        this.reconnect_timeout = null;\n        this.handler = handler;\n        this.current_inbox = null;\n\n        this.connect();\n    }\n\n    authenticate(username: string, password: string) {\n        if (this.socket) {\n            this.socket.send(email_client.ClientToServer.encode({\n                authenticate: {\n                    username,\n                    password,\n                }\n            }).finish());\n            this.socket.send(JSON.stringify({\n                authenticate: {\n                    username,\n                    password\n                }\n            }));\n        }\n    }\n\n    load_inbox(inbox: server.Inbox) {\n        if (this.socket) {\n            this.socket.send(JSON.stringify({\n                load_inbox: inbox\n            }));\n        }\n        this.current_inbox = inbox;\n    }\n\n    load_email(email: server.EmailInfo) {\n        if (this.socket) {\n            this.socket.send(JSON.stringify({\n                load_email: email\n            }));\n        }\n    }\n\n    load_attachment(attachment: server.AttachmentInfo) {\n        if (this.socket) {\n            this.socket.send(JSON.stringify({\n                load_attachment: attachment\n            }));\n        }\n    }\n\n    private connect() {\n        this.socket = new WebSocket(\n            (document.location.protocol === \"https:\" ? \"wss://\" : \"ws://\") +\n            document.location.host +\n            document.location.pathname +\n            \"ws/\"\n        );\n        this.socket.onopen = this.onopen.bind(this);\n        this.socket.onclose = this.onclose.bind(this);\n        this.socket.onerror = this.onerror.bind(this);\n        this.socket.onmessage = this.onmessage.bind(this);\n    }\n\n    private onopen(ev: Event) {\n    }\n\n    private onclose(ev: CloseEvent) {\n        this.socket = null;\n        if (this.reconnect_timeout) {\n            clearTimeout(this.reconnect_timeout);\n        }\n        this.reconnect_timeout = setTimeout(() => {\n            this.connect();\n        }, 5000);\n        this.handler.authenticate_result(false);\n    }\n\n    private onerror(ev: Event) {\n        console.error(\"[Websocket]\", ev);\n    }\n\n    private onmessage(ev: MessageEvent) {\n        let json: server.WebSocketMessage = JSON.parse(ev.data);\n        if (json.init) {\n            this.handler.setup(json.init);\n            if (this.current_inbox) {\n                this.load_inbox(this.current_inbox);\n            }\n        } else if (json.email_received) {\n            this.handler.email_received(json.email_received);\n        } else if (json.inbox_loaded) {\n            this.handler.inbox_loaded(\n                json.inbox_loaded.inbox_with_address,\n                json.inbox_loaded.emails\n            );\n        } else if (json.email_loaded) {\n            this.handler.email_loaded(\n                json.email_loaded\n            );\n        } else if (json.attachment_loaded) {\n            this.handler.attachment_loaded(\n                json.attachment_loaded\n            );\n        } else if (json.authenticate_result === true || json.authenticate_result === false) {\n            this.handler.authenticate_result(json.authenticate_result);\n        } else {\n            console.log(\"Unknown server message\", json);\n        }\n    }\n}","module.exports = React;","module.exports = ReactDOM;"],"sourceRoot":""}